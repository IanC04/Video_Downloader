try:
    from pytube import YouTube
    import pytube.exceptions
except ModuleNotFoundError:
    # the batch file should have downloaded pytube to the venv using the GitHub's
    # requirements.txt generated by (pip freeze > requirements.txt)
    print("pytube is not installed.")
    exit()
import tkinter as tk
from tkinter import filedialog
import os
import signal

signal.signal(signal.SIGINT, signal.SIG_DFL)
del signal


class Downloader(tk.Tk):
    """
    A class that downloads YouTube videos.
    """
    if os.name == "nt":
        DEFAULT_SAVE_LOCATION = f"{os.getenv('USERPROFILE')}\\Downloads"
    else:  # PORT: For *Nix systems
        DEFAULT_SAVE_LOCATION = f"{os.getenv('HOME')}/Downloads"

    def __init__(self):
        super().__init__()
        self._url = None
        self._yt = None
        self._video = None
        self._save_directory = None
        self._output_file = None

        ws = self.winfo_screenwidth() // 3  # width of the screen
        hs = self.winfo_screenheight() // 3  # height of the screen
        self.geometry(f"+{ws}+{hs}")
        self.title("YouTube Downloader")
        self.resizable(False, False)
        self.focus_force()

        # Label
        self._label_text = tk.StringVar()
        self._label = tk.Label(self, textvariable=self._label_text, justify=tk.CENTER,
                               font=("Courier", 14), fg="black", width=75,
                               wraplength=self.winfo_pixels(ws))
        self._label.grid(row=0, columnspan=2)

        # Input box to type link
        self._input_box = tk.Entry(self, width=40, bg="light yellow", font=("Arial",
                                                                            14), fg="blue",
                                   state=tk.DISABLED)
        self._input_box.grid(row=1, columnspan=2)

        self._back = tk.Button(self, text="Back", width=10, height=1, state=tk.DISABLED)

        # Move buttons
        self._back.grid(row=2, column=0, sticky=tk.E)
        self._next = tk.Button(self, text="Start", width=10, height=1, command=self.get_url)
        self._next.grid(row=2, column=1, sticky=tk.W)

        # Tip label
        self._tip_text = tk.StringVar()
        self._tip = tk.Label(self, textvariable=self._tip_text, justify=tk.LEFT)
        self._tip.grid(row=3, columnspan=2, sticky=tk.W)
        # Exit button
        leave = tk.Button(self, text="Exit",
                          command=self.destroy)
        leave.grid(row=4, column=1, sticky=tk.E)

        self.reset()

    def get_url(self) -> None:
        self._label_text.set("Enter the URL of the video you want to download.")
        self._input_box.config(state=tk.NORMAL)
        self._input_box.bind("<KeyRelease>", lambda event: self.check_url())

        self._back.config(command=self.reset, state=tk.NORMAL)
        self._next.config(text="Confirm", command=self.confirm_url, state=tk.NORMAL)
        self._input_box.focus_force()

    def check_url(self) -> None:
        self._url = self._input_box.get().strip()
        if self._url == "":
            self._tip_text.set("Tip: Please type in a URL into the yellow box. Use Ctrl + V to "
                               "paste.")
        else:
            try:
                self._yt = YouTube(self._url)
                self._tip_text.set(f"Found video: {self._yt.title}")
            except pytube.exceptions.RegexMatchError:
                self._tip_text.set("Tip: Video not found. Continue typing...")

    def confirm_url(self) -> None:
        if self._yt is None:
            self._tip_text.set("Tip: Invalid URL. Please try again. Make sure entire link is "
                               "pasted correctly!")
            return
        self._input_box.delete(0, tk.END)
        self._input_box.config(state=tk.DISABLED)
        self._input_box.unbind("<KeyRelease>")
        self._tip_text.set("Tip: Please wait as the download begins.")
        self.try_extract_video()

    def try_extract_video(self) -> None:
        self._label_text.set("Extracting Video")
        self._back.config(command=self.get_url)
        self._next.config(state=tk.DISABLED)
        try:
            videos = self._yt.streams.filter(file_extension='mp4')
            self._video = videos.get_by_resolution('360p')
            if self._video is None:
                self._video = videos.get_lowest_resolution()
            self.get_save_directory()
        except pytube.exceptions.PytubeError:
            self._label_text.set("Please try again with different video.")
            self._tip_text.set("Tip: Internal error! Only downloads as "
                               "mp4.")

    def get_save_directory(self) -> None:
        self._save_directory = self.DEFAULT_SAVE_LOCATION

        self._label_text.set("Select a directory to save the video")
        self._tip_text.set("Tip: You can press Ctrl + V to paste the path into the dialog window "
                           "or just close the window for the default directory.")
        destination = tk.filedialog.askdirectory(initialdir=self.DEFAULT_SAVE_LOCATION,
                                                 mustexist=True,
                                                 title="Select a directory to save the video")
        if destination == "":
            self._label_text.set(f"Using default directory: {self._save_directory}")
        elif os.path.isdir(destination):
            self._save_directory = destination
        else:
            self._label_text.set(f"Directory {destination} does not exist.")
            return self.get_save_directory()
        self.start_download()

    def start_download(self) -> None:
        self._label_text.set("Downloading...")
        self._output_file = self._video.download(output_path=self._save_directory)
        self.confirm_success()

    def confirm_success(self) -> None:
        self._label_text.set("Download Complete!")
        self._tip_text.set(f"{self._video.title} has been successfully downloaded to "
                           f"{self._output_file}.")
        self._back.config(text="Leave", command=self.destroy)
        self._next.config(text="Again!", command=self.reset, state=tk.NORMAL)

    def reset(self) -> None:
        self._label_text.set("YouTube Downloader-Ian Chen. Last updated 01/10/2024.")
        self._input_box.config(state=tk.DISABLED)
        self._input_box.delete(0, tk.END)
        self._input_box.unbind("<KeyRelease>")

        self._back.config(text="Back", state=tk.DISABLED)
        self._next.config(text="Next", command=self.get_url, state=tk.NORMAL)
        self._tip_text.set("Tip: You can press Ctrl + V to paste the URL.")

        self._url = None
        self._yt = None
        self._video = None
        self._save_directory = None
        self._output_file = None


downloader = Downloader()
downloader.mainloop()
