try:
    from pytube import YouTube
except ModuleNotFoundError:
    # the batch file should have downloaded pytube to the venv using the GitHub's
    # requirements.txt generated by (pip freeze > requirements.txt)
    print("pytube is not installed.")
    exit()
import tkinter as tk
from tkinter import filedialog
import os


class Downloader(tk.Tk):
    """
    A class that downloads YouTube videos.
    """
    DEFAULT_SAVE_LOCATION = f"{os.getcwd()}/Downloads"

    def __init__(self):
        super().__init__()
        self._back = None
        self._next = None
        self._label = None
        self._label_text = None
        self._input_box = None
        self._url = None
        self._yt = None
        self._video = None
        self._save_directory = None
        self._output_file = None

        ws = self.winfo_screenwidth() // 3  # width of the screen
        hs = self.winfo_screenheight() // 3  # height of the screen
        self.geometry(f"+{ws}+{hs}")
        self.title("YouTube Downloader")
        self.resizable(False, False)
        self.focus_force()

        self._label_text = tk.StringVar()
        self._label = tk.Entry(self, textvariable=self._label_text, justify=tk.CENTER,
                               state='readonly', font=("Courier", 14), fg="black", width=75)
        self._label.grid(row=0, columnspan=2)
        self._input_box = tk.Text(self, height=1, width=40, bg="light yellow", font=("Arial",
                                                                                     14), fg="blue",
                                  state=tk.DISABLED)
        self._input_box.grid(row=1, columnspan=2)
        self._back = tk.Button(self, text="Back", width=10, height=1, state=tk.DISABLED)

        # Move buttons
        self._back.grid(row=2, column=0, sticky=tk.E)
        self._next = tk.Button(self, text="Start", width=10, height=1, command=self.get_url)
        self._next.grid(row=2, column=1, sticky=tk.W)

        # Exit button
        leave = tk.Button(self, text="Exit",
                          command=self.destroy)
        leave.grid(row=3, column=1, sticky=tk.E)

        self.reset()

    def get_url(self) -> None:
        self._label_text.set("Enter the URL of the video you want to download.")
        self._input_box.config(state=tk.NORMAL)
        self._back.config(command=self.reset, state=tk.NORMAL)
        self._next.config(text="Confirm", command=self.confirm_url, state=tk.NORMAL)
        self._input_box.focus_force()

    def confirm_url(self) -> None:
        self._url = self._input_box.get(1.0, tk.END).strip()
        self._input_box.delete(1.0, tk.END)
        self._input_box.config(state=tk.DISABLED)
        self.try_extract_video()

    def try_extract_video(self) -> None:
        self._label_text.set("Extracting Video")
        self._back.config(command=self.get_url)
        self._next.config(state=tk.DISABLED)
        try:
            yt = YouTube(self._url)
            self._yt = yt
            self._video = self._yt.streams.filter(file_extension='mp4').get_highest_resolution()
            self.get_save_directory()
        except:
            self._label_text.set("Invalid URL. Please try again.")

    def get_save_directory(self) -> None:
        if not os.path.isdir(self.DEFAULT_SAVE_LOCATION):
            os.mkdir(self.DEFAULT_SAVE_LOCATION)
        self._save_directory = self.DEFAULT_SAVE_LOCATION

        self._label_text.set("Select a directory to save the video")
        destination = tk.filedialog.askdirectory(mustexist=True,
                                                 title="Select a directory to save the video")
        if destination == "":
            self._label_text.set(f"Using default directory: {self._save_directory}")
        elif os.path.isdir(destination):
            self._save_directory = destination
        else:
            self._label_text.set(f"Directory {destination} does not exist.")
            return self.get_save_directory()
        self.start_download()

    def start_download(self) -> None:
        self._label_text.set("Downloading...")
        self._output_file = self._video.download(output_path=self._save_directory)
        self.confirm_success()

    def confirm_success(self) -> None:
        self._label_text.set(f"{self._video.title} has been successfully downloaded to "
                             f"{self._output_file}.")
        self._back.config(text="Leave", command=self.destroy)
        self._next.config(text="Again", command=self.reset, state=tk.NORMAL)

    def reset(self) -> None:
        self._label_text.set("YouTube Downloader-Ian Chen. Last updated 01/09/2024.")
        self._input_box.config(state=tk.DISABLED)
        self._back.config(text="Back", state=tk.DISABLED)
        self._next.config(text="Next", command=self.get_url, state=tk.NORMAL)
        # self._next.grid(row=2, column=1)
        self._url = None
        self._yt = None
        self._video = None
        self._save_directory = None
        self._output_file = None


import signal

signal.signal(signal.SIGINT, signal.SIG_DFL)
del signal

downloader = Downloader()
downloader.mainloop()
